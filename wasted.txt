// Middleware to authenticate JWT tokens from cookies
// const authenticateJWT = (req, res, next) => {
//   try{
//     const token = req.cookies.auth_token; // Extract token from cookies
//     if (!token) return res.status(401).send("Access denied. No token provided.");
  
//     jwt.verify(token, SECRET_KEY, (err, user) => {
//       if (err) return res.status(403).send("Invalid token.");
//       req.user = user; // Store user in request object
//       next();
//     });
//   }
//   catch(error){
//     res.status(500).send(error)
//   }
// };


// Register a user (only for testing)
// (async () => {
//   try {
//     const username = "sagar123";
//     const plainPassword = "678910";
//     const hashedPassword = await bcrypt.hash(plainPassword, 10);

//     await db.execute("INSERT INTO users (username, password) VALUES (?, ?)", [
//       username,
//       hashedPassword,
//     ]);
//     console.log("User inserted successfully!");
//   } catch (err) {
//     console.error("Error inserting user:", err);
//   }
// })();

// Middleware to authenticate JWT tokens
// const authenticateJWT = (req, res, next) => {
//   const token = req.header("Authorization")?.split(" ")[1]; // Extract token
//   if (!token) return res.status(401).send("Access denied. No token provided.");

//   jwt.verify(token, SECRET_KEY, (err, user) => {
//     if (err) return res.status(403).send("Invalid token.");
//     req.user = user; // Store user in request object
//     next();
//   });
// };
//POST /logout




// //POST /logout

// app.post("/logout", authenticateJWT, (req, res) => {
//   try {
//     // Clear the auth_token cookie by setting it with an expired date
//     res.clearCookie("auth_token", {
//       httpOnly: true, // Ensures the cookie can't be accessed via JavaScript
//       secure: process.env.NODE_ENV === "production", // Ensures cookie is sent only over HTTPS in production
//       sameSite: "Strict", // Prevents the cookie from being sent in cross-site requests
//     });

//     // Send a response indicating the user has been logged out
//     res.json({ message: "Logged out successfully" });
//   } catch (err) {
//     res.status(500).send("Error logging out");
//   }
// });

// // POST /login - User login
// app.post("/login", async (req, res) => {
//   const { username, password } = req.body;

//   try {
//     const [results] = await db.execute(
//       "SELECT * FROM users WHERE username = ?",
//       [username]
//     );

//     if (results.length === 0)
//       return res.status(400).send("Invalid username or password");

//     const user = results[0];
//     const isValid = await bcrypt.compare(password, user.password);
//     if (!isValid) return res.status(400).send("Invalid username or password");

//     const token = jwt.sign(
//       { id: user.id, username: user.username },
//       SECRET_KEY,
//       { expiresIn: "1h" }
//     );
//     res.json({ token });
//   } catch (err) {
//     res.status(500).send("Database query error");
//   }
// });
// // Optionally, set the token in a cookie
    // res.cookie("auth_token", token, {
    //   httpOnly: true, // Important to set the cookie as httpOnly to prevent XSS
    //   secure: process.env.NODE_ENV === "production", // Set secure flag in production
    //   maxAge: 3600000, // 1 hour
    // });

    // // Redirect to /getusers after successful login
    // res.redirect("/getusers");