const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const mysql = require("mysql2");
const cookieParser = require("cookie-parser");
const { body, validationResult } = require("express-validator");
const app = express();

const SECRET_KEY = "your_secret_key";  // Secret key for signing the JWT

app.use(cookieParser());
app.use(express.json());

// MySQL database connection
const db = mysql.createConnection({
  host: "localhost",
  user: "root",       // Replace with your MySQL username
  password: "",       // Replace with your MySQL password
  database: "jwt_auth" // Replace with your database name
});

db.connect((err) => {
  if (err) {
    console.error("Error connecting to MySQL:", err);
  } else {
    console.log("Connected to MySQL database");
  }
});

// Middleware to authenticate JWT tokens
const authenticateJWT = (req, res, next) => {
  const token = req.header("Authorization")?.split(" ")[1]; // Extract the token from the Authorization header
  if (!token) {
    return res.status(401).send("Access denied. No token provided.");
  }

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) {
      return res.status(403).send("Invalid token.");
    }
    req.user = user;  // Store the user data in the request object
    next();
  });
};

// POST /login - User login route to generate JWT
app.post("/login", async (req, res) => {
  const { username, password } = req.body;

  // Find the user based on the username
  db.query("SELECT * FROM users WHERE username = ?", [username], async (err, results) => {
    if (err) {
      return res.status(500).send("Database query error");
    }

    if (results.length === 0) {
      return res.status(400).send("Invalid username or password");
    }

    const user = results[0];

    // Compare the provided password with the stored hashed password using bcrypt
    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) return res.status(400).send("Invalid username or password");

    // Create a JWT token
    const token = jwt.sign(
      { id: user.id, username: user.username },  // Payload (user data)
      SECRET_KEY,  // Secret key for signing the token
      { expiresIn: "1h" }  // Token expiration (1 hour)
    );

    res.json({ token });  // Send the token to the client
  });
});

// GET /getusers - Protected route, requires a valid JWT token
app.get("/getusers", authenticateJWT, (req, res) => {
  // Fetch user details from MySQL using the user id stored in the token
  db.query("SELECT * FROM user_details WHERE user_id = ?", [req.user.id], (err, results) => {
    if (err) {
      return res.status(500).send("Database query error");
    }
    res.json(results);  // Send the user details to the client
  });
});

// POST /adduser - Add a new user
app.post("/adduser", body("email").isEmail(), body("name").notEmpty(), body("age").isNumeric(), (req, res) => {
  const result = validationResult(req);
  const { email, name, age } = req.body;

  if (!result.isEmpty()) {
    return res.status(400).send("Error in validation");
  }

  // Insert new user details into user_details table
  db.query("INSERT INTO user_details (email, name, age, user_id) VALUES (?, ?, ?, ?)", [email, name, age, req.user.id], (err, results) => {
    if (err) {
      return res.status(500).send("Error inserting user");
    }
    res.json({ message: "User added", addedItem: { email, name, age } });
  });
});

// PUT /edit/:name - Edit user details
app.put("/edit/:name", body("email").isEmail(), body("name").notEmpty(), body("age").isNumeric(), (req, res) => {
  const result = validationResult(req);
  if (!result.isEmpty()) {
    return res.status(400).send("Error in validation");
  }

  const { email, name, age } = req.body;
  const userId = req.user.id;

  // Update user details in the database
  db.query(
    "UPDATE user_details SET email = ?, name = ?, age = ? WHERE name = ? AND user_id = ?",
    [email, name, age, req.params.name, userId],
    (err, results) => {
      if (err) {
        return res.status(500).send("Database query error");
      }
      if (results.affectedRows === 0) {
        return res.status(404).send("User not found");
      }
      res.json({ message: `${name} updated`, user: { email, name, age } });
    }
  );
});

// DELETE /deleteuser/:name - Delete a user
app.delete("/deleteuser/:name", (req, res) => {
  const userId = req.user.id;

  // Delete user details from the user_details table
  db.query("DELETE FROM user_details WHERE name = ? AND user_id = ?", [req.params.name, userId], (err, results) => {
    if (err) {
      return res.status(500).send("Database query error");
    }
    if (results.affectedRows === 0) {
      return res.status(404).send("User not found");
    }
    res.send(`${req.params.name} deleted`);
  });
});

const port = process.env.PORT || 8000;
app.listen(port, () => console.log(`Server started on port ${port}`));
 











 npm install mysql2
 


 CREATE DATABASE jwt_auth;

USE jwt_auth;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);

CREATE TABLE user_details (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255),
    name VARCHAR(255),
    age INT,
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);




POST POSTMAN
{
  "username": "pramit123",
  "password": "12345"
}
