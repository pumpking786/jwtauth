npm install jsonwebtoken bcryptjs







const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");  // For hashing passwords (not required if you're storing plain text passwords)
const cookieParser = require("cookie-parser");
const session = require("express-session");
const app = express();

const SECRET_KEY = "your_secret_key";  // Secret key for signing the JWT

app.use(cookieParser());
app.use(express.json());

const validateemail = body("email").isEmail();
const validatename = body("name").notEmpty();
const validateage = body("age").isNumeric();

// Sample users (raw data - no MongoDB/MySQL)
const users = [
  { id: 1, username: "pramit123", password: "$2a$10$D1dEzQHFh8QU0jSHf3d7gOEQFTfLqFq75N0g0kzWe4cWVmAC8mF6m" }, // password: 12345
  { id: 2, username: "aakash456", password: "$2a$10$3FnZ8bG2XJl1QOJ0hz8K7uvt4kIZ9T0sPnR9V5fY9HjxH1od0X6TG" }, // password: 678910
];

// User details (raw data)
const userDetails = [
  { email: "pramit@gmail.com", name: "Pramit", age: 15 },
  { email: "Sagar@gmail.com", name: "Sagar", age: 19 },
];

// Middleware to authenticate JWT tokens
const authenticateJWT = (req, res, next) => {
  const token = req.header("Authorization")?.split(" ")[1]; // Extract the token from the Authorization header
  if (!token) {
    return res.status(401).send("Access denied. No token provided.");
  }

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) {
      return res.status(403).send("Invalid token.");
    }
    req.user = user;  // Store the user data in the request object
    next();
  });
};

// POST /login - User login route to generate JWT
app.post("/login", async (req, res) => {
  const { username, password } = req.body;

  // Find the user based on the username
  const user = users.find((u) => u.username === username);
  if (!user) return res.status(400).send("Invalid username or password");

  // Compare the provided password with the stored hashed password using bcrypt
  const isValid = await bcrypt.compare(password, user.password);
  if (!isValid) return res.status(400).send("Invalid username or password");

  // Create a JWT token
  const token = jwt.sign(
    { id: user.id, username: user.username },  // Payload (user data)
    SECRET_KEY,  // Secret key for signing the token
    { expiresIn: "1h" }  // Token expiration (1 hour)
  );

  res.json({ token });  // Send the token to the client
});

// GET /getusers - Protected route, requires a valid JWT token
app.get("/getusers", authenticateJWT, (req, res) => {
  // If the token is valid, send the user details
  res.json(userDetails);
});

// POST /adduser - Add a new user
app.post("/adduser", validateemail, validatename, validateage, (req, res) => {
  const result = validationResult(req);
  const { email, name, age } = req.body;

  if (!result.isEmpty()) {
    return res.send("Error in validation");
  }

  const addedItem = { email, name, age };
  userDetails.push(addedItem);
  res.json({ message: "User added", addedItem });
});

// PUT /edit/:name - Edit user details
app.put("/edit/:name", validateemail, validatename, validateage, (req, res) => {
  const result = validationResult(req);
  if (!result.isEmpty()) {
    return res.send("Error in validation");
  }

  const name = req.params.name.toLowerCase();
  const { email, name: newName, age } = req.body;
  const user = userDetails.find((i) => i.name.toLowerCase() === name);

  if (!user) {
    res.send("User not found");
  }

  user.email = email || user.email;
  user.name = newName || user.name;
  user.age = age || user.age;

  return res.json({ message: `${name} updated`, user });
});

// DELETE /deleteuser/:name - Delete a user
app.delete("/deleteuser/:name", (req, res) => {
  const name = req.params.name.toLowerCase();
  const user = userDetails.find((i) => i.name.toLowerCase() === name);

  if (!user) {
    res.send("Name not found");
  }

  const index = userDetails.indexOf(user);
  userDetails.splice(index, 1);

  res.send(`${name} deleted`);
});

const port = process.env.PORT || 8000;
app.listen(port, () => console.log(`Server started on port ${port}`));





POST POSTMAN
{
  "username": "pramit123",
  "password": "12345"
}