const express = require("express");
const bcrypt = require("bcryptjs");
const mysql = require("mysql2/promise");
const cookieParser = require("cookie-parser");
const { body, validationResult } = require("express-validator");
const passport = require("passport");
const LocalStrategy = require("passport-local").Strategy;
const session = require("express-session");

const app = express();

// MySQL database connection (async/await)
const db = mysql.createPool({
  host: "localhost",
  user: "root",
  password: "password",
  database: "jwt_auth",
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

// Set up Passport
passport.use(
  new LocalStrategy(async (username, password, done) => {
    try {
      const [results] = await db.execute("SELECT * FROM users WHERE username = ?", [username]);

      if (results.length === 0) return done(null, false, { message: "Invalid username or password" });

      const user = results[0];
      const isValid = await bcrypt.compare(password, user.password);

      if (!isValid) return done(null, false, { message: "Invalid username or password" });

      return done(null, user); // Successful login
    } catch (err) {
      return done(err);
    }
  })
);

// Serialize and deserialize user for session management
passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
  try {
    const [results] = await db.execute("SELECT * FROM users WHERE id = ?", [id]);
    done(null, results[0]);
  } catch (err) {
    done(err);
  }
});

// Middleware to initialize passport and manage sessions
app.use(cookieParser());
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(
  session({
    secret: "your_secret_key", // Use a secret key for sessions
    resave: false,
    saveUninitialized: false,
  })
);
app.use(passport.initialize());
app.use(passport.session());

// POST /signup - User registration (signup)
app.post(
  "/signup",
  body("username").notEmpty().withMessage("Username is required"),
  body("password").isLength({ min: 6 }).withMessage("Password must be at least 6 characters long"),
  async (req, res) => {
    const result = validationResult(req);
    if (!result.isEmpty()) {
      return res.status(400).json({ errors: result.array() });
    }

    const { username, password } = req.body;

    try {
      // Check if the username already exists in the database
      const [existingUser] = await db.execute("SELECT * FROM users WHERE username = ?", [username]);
      if (existingUser.length > 0) {
        return res.status(400).send("Username already taken");
      }

      // Hash the password before storing it
      const hashedPassword = await bcrypt.hash(password, 10);

      // Insert new user into the 'users' table
      await db.execute("INSERT INTO users (username, password) VALUES (?, ?)", [username, hashedPassword]);

      res.json({ message: "User registered successfully!" });
    } catch (err) {
      res.status(500).send("Database query error");
    }
  }
);

// POST /login - User login with Passport.js
app.post("/login", passport.authenticate("local", {
  successRedirect: "/getusers",
  failureRedirect: "/login",
  failureFlash: true
}));

// GET /getusers - Protected route
// Requires login to access
app.get("/getusers", (req, res) => {
  if (!req.isAuthenticated()) {
    return res.status(401).send("Unauthorized");
  }

  db.execute("SELECT * FROM user_details WHERE user_id=?", [req.user.id])
    .then(([results]) => {
      res.json(results);
    })
    .catch(err => {
      res.status(500).send("Database query error");
    });
});

// POST /adduser - Add a new user (Protected)
app.post(
  "/adduser",
  (req, res, next) => {
    if (!req.isAuthenticated()) {
      return res.status(401).send("Unauthorized");
    }
    next();
  },
  body("email").isEmail(),
  body("name").notEmpty(),
  body("age").isNumeric(),
  async (req, res) => {
    const result = validationResult(req);
    if (!result.isEmpty()) return res.status(400).send("Error in validation");

    const { email, name, age } = req.body;

    try {
      await db.execute(
        "INSERT INTO user_details (email, name, age, user_id) VALUES (?, ?, ?, ?)",
        [email, name, age, req.user.id]
      );
      res.json({ message: "User added", addedItem: { email, name, age } });
    } catch (err) {
      res.status(500).send("Error inserting user");
    }
  }
);

// PUT /edit/:name - Edit user details (Protected)
app.put(
  "/edit/:name",
  (req, res, next) => {
    if (!req.isAuthenticated()) {
      return res.status(401).send("Unauthorized");
    }
    next();
  },
  body("email").isEmail(),
  body("name").notEmpty(),
  body("age").isNumeric(),
  async (req, res) => {
    const result = validationResult(req);
    if (!result.isEmpty()) return res.status(400).send("Error in validation");

    const { email, name, age } = req.body;

    try {
      const [results] = await db.execute(
        "UPDATE user_details SET email = ?, name = ?, age = ? WHERE name = ? AND user_id = ?",
        [email, name, age, req.params.name, req.user.id]
      );

      if (results.affectedRows === 0)
        return res.status(404).send("User not found");
      res.json({ message: `${name} updated`, user: { email, name, age } });
    } catch (err) {
      res.status(500).send("Database query error");
    }
  }
);

// DELETE /deleteuser/:name - Delete a user (Protected)
app.delete("/deleteuser/:name", (req, res, next) => {
  if (!req.isAuthenticated()) {
    return res.status(401).send("Unauthorized");
  }
  next();
}, async (req, res) => {
  try {
    const [results] = await db.execute(
      "DELETE FROM user_details WHERE name = ? AND user_id = ?",
      [req.params.name, req.user.id]
    );

    if (results.affectedRows === 0)
      return res.status(404).send("User not found");
    res.send(`${req.params.name} deleted`);
  } catch (err) {
    res.status(500).send("Database query error");
  }
});

const port = process.env.PORT || 8000;
app.listen(port, () => console.log(`Server started on port ${port}`));
